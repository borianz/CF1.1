//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

//[assembly: EdmSchemaAttribute()]
//#region EDM 关系源元数据

//[assembly: EdmRelationshipAttribute("Lab2Model", "FK_Expirement_ExpType", "ExpType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lab2.ExpType), "Exp", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.Exp), true)]
//[assembly: EdmRelationshipAttribute("Lab2Model", "FK_ExpPara_Expirement", "Exp", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lab2.Exp), "ExpPara", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.ExpPara), true)]
//[assembly: EdmRelationshipAttribute("Lab2Model", "FK_ExpValue_Exp", "Exp", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lab2.Exp), "ExpValue", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.ExpValue), true)]
//[assembly: EdmRelationshipAttribute("Lab2Model", "FK_ExpValue_Student", "Student", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Lab2.Student), "ExpValue", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.ExpValue), true)]
//[assembly: EdmRelationshipAttribute("Lab2Model", "GroupRelation", "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.Group), "Student", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.Student))]
//[assembly: EdmRelationshipAttribute("Lab2Model", "BlackGroup", "Exp", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.Exp), "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.Group))]
//[assembly: EdmRelationshipAttribute("Lab2Model", "WhiteGroup", "Exp", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.Exp), "Group", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.Group))]
//[assembly: EdmRelationshipAttribute("Lab2Model", "FK_Student_Class", "Class", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Lab2.Class), "Student", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Lab2.Student), true)]

//#endregion

namespace Lab2
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class Lab2Entities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“Lab2Entities”部分中的连接字符串初始化新 Lab2Entities 对象。
        /// </summary>
        public Lab2Entities() : base("name=Lab2Entities", "Lab2Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
            ExpValues.MergeOption = MergeOption.OverwriteChanges;
            Exps.MergeOption = MergeOption.OverwriteChanges;
            ExpTypes.MergeOption = MergeOption.OverwriteChanges;
            ExpParas.MergeOption = MergeOption.OverwriteChanges;
            Groups.MergeOption = MergeOption.OverwriteChanges;
            Students.MergeOption = MergeOption.OverwriteChanges;
            Classes.MergeOption = MergeOption.OverwriteChanges;
        }
    
        /// <summary>
        /// 初始化新的 Lab2Entities 对象。
        /// </summary>
        public Lab2Entities(string connectionString) : base(connectionString, "Lab2Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 Lab2Entities 对象。
        /// </summary>
        public Lab2Entities(EntityConnection connection) : base(connection, "Lab2Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Exp> Exps
        {
            get
            {
                if ((_Exps == null))
                {
                    _Exps = base.CreateObjectSet<Exp>("Exps");
                }
                return _Exps;
            }
        }
        private ObjectSet<Exp> _Exps;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<ExpPara> ExpParas
        {
            get
            {
                if ((_ExpParas == null))
                {
                    _ExpParas = base.CreateObjectSet<ExpPara>("ExpParas");
                }
                return _ExpParas;
            }
        }
        private ObjectSet<ExpPara> _ExpParas;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<ExpType> ExpTypes
        {
            get
            {
                if ((_ExpTypes == null))
                {
                    _ExpTypes = base.CreateObjectSet<ExpType>("ExpTypes");
                }
                return _ExpTypes;
            }
        }
        private ObjectSet<ExpType> _ExpTypes;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<ExpValue> ExpValues
        {
            get
            {
                if ((_ExpValues == null))
                {
                    _ExpValues = base.CreateObjectSet<ExpValue>("ExpValues");
                }
                return _ExpValues;
            }
        }
        private ObjectSet<ExpValue> _ExpValues;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Group> Groups
        {
            get
            {
                if ((_Groups == null))
                {
                    _Groups = base.CreateObjectSet<Group>("Groups");
                }
                return _Groups;
            }
        }
        private ObjectSet<Group> _Groups;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Student> Students
        {
            get
            {
                if ((_Students == null))
                {
                    _Students = base.CreateObjectSet<Student>("Students");
                }
                return _Students;
            }
        }
        private ObjectSet<Student> _Students;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Class> Classes
        {
            get
            {
                if ((_Classes == null))
                {
                    _Classes = base.CreateObjectSet<Class>("Classes");
                }
                return _Classes;
            }
        }
        private ObjectSet<Class> _Classes;

        #endregion

        #region AddTo 方法
    
        /// <summary>
        /// 用于向 Exps EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToExps(Exp exp)
        {
            base.AddObject("Exps", exp);
        }
    
        /// <summary>
        /// 用于向 ExpParas EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToExpParas(ExpPara expPara)
        {
            base.AddObject("ExpParas", expPara);
        }
    
        /// <summary>
        /// 用于向 ExpTypes EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToExpTypes(ExpType expType)
        {
            base.AddObject("ExpTypes", expType);
        }
    
        /// <summary>
        /// 用于向 ExpValues EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToExpValues(ExpValue expValue)
        {
            base.AddObject("ExpValues", expValue);
        }
    
        /// <summary>
        /// 用于向 Groups EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToGroups(Group group)
        {
            base.AddObject("Groups", group);
        }
    
        /// <summary>
        /// 用于向 Students EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToStudents(Student student)
        {
            base.AddObject("Students", student);
        }
    
        /// <summary>
        /// 用于向 Classes EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToClasses(Class @class)
        {
            base.AddObject("Classes", @class);
        }

        #endregion

    }

    #endregion

   

    
}
